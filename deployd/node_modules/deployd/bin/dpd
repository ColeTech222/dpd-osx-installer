#!/usr/bin/env node

/**
 * Dependencies
 */

var program = require('commander')
  , deployd = require('../')
  , repl = require('../lib/client/repl')
  , shelljs = require('shelljs/global')
  , mongod = require('../lib/util/mongod')
  , path = require('path')
  , tty = require('tty');

/**
 * Get the version number from the package.json
 */

program
  .version(require('../package').version)
  .option('-m, --mongod [path]', 'path to mongod executable (defaults to `mongod`)')
  .option('-p, --port [port]', 'port to host server (defaults to 2403)')
  .option('--wait', 'wait for input before exiting')
  .option('-d, --dashboard', 'start the dashboard immediately')

/**
 * Commands
 */

program
  .command('create [project-name]')
  .description('\tcreate a project in a new directory\n\teg. `dpd create my-app`')
  .action(function(name) {
    var name = name || 'my-deployd-app';
    mkdir('-p', name);
    mkdir('-p', name + '/public');
    mkdir('-p', name + '/data');
    mkdir('-p', name + '/.dpd');
    mkdir('-p', name + '/.dpd/pids');
    ('').to(name + '/.dpd/pids/mongod');
    ("{}").to(name + '/app.dpd');
    console.info('to start your app:');
    console.info('\t$ cd', name);
    console.info('\t$ dpd');
  });

function start(file) {
  var port = program.port || 2403;
  if (file) {
    process.chdir(path.dirname(file));
  }
  if (test('-f', 'app.dpd')) {
    console.log("starting deployd...");
    if (!test('-d', './.dpd')) mkdir('-p', './.dpd');
    if (!test('-d', './.dpd/pids')) mkdir('-p', './.dpd/pids');
    if (!test('-d', './data')) mkdir('-p', './data');

    mongod.restart(program.mongod || 'mongod', function(err) {
      if (err) { 
        console.log("Failed to start MongoDB");
        return stop(1);
      }
      var options = {port: port, env: 'development', db: {host: '127.0.0.1', port: 27017, name: '-deployd'}}

      options.env = process.env.DPD_ENV || options.env;
      if(options.env !== 'development') console.log('starting in %s mode', options.env);

      var dpd = deployd(options);
      dpd.listen();
      dpd.on('listening', function () {

        console.info('listening on port', port);
        var commands = repl(dpd);
        if (program.dashboard) {
          commands.dashboard();
        }
      });
    });
  } else {
    console.log("This directory does not contain a Deployd app!");
    console.log("Use \"dpd create <appname>\" to create a new app");
    console.log("or use \"dpd path/to/app.dpd\" to start an app in another directory");
    stop(1);
  }
}

program
  .command('*')
  .description('\t[default] start the server in the current project in development mode\n' +
               '\twith an interactive shell/repl for interacting with the running server\n' +
               '\te.g. dpd (starts server in current directory),\n' +
               '\t     dpd my-app/app.dpd (starts app from file)')
  .action(start);


function stop(code) {
  var fn = function() {
    exit(code);
  };

  if (program.wait) {
    process.stdin.resume();
    tty.setRawMode(true);
    process.stdout.write('\nPress any key to continue...\n');
    process.stdin.on('keypress', fn);
  } else {
    fn();
  }
}

process.on('uncaughtException', function(err) {
  console.log(err);
  console.log(err.stack);
  stop(1);
});


/**
 * Parse the arguments
 */

program.parse(process.argv);

if(program.args.length === 0) start();

